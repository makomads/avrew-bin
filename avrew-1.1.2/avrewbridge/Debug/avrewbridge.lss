
avrewbridge.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000078  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000078  00000650  2**0
                  ALLOC
  2 .bss          00000017  00800060  00800060  000007e4  2**0
                  ALLOC
  3 .comment      0000002f  00000000  00000000  000007e4  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000813  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a6e  00000000  00000000  00000853  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000503  00000000  00000000  000012c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000814  00000000  00000000  000017c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a8  00000000  00000000  00001fd8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000163  00000000  00000000  00002080  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005c9  00000000  00000000  000021e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  000027ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000002  0000072e  0000072e  000007e2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000027dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.__vector_2 00000030  000006fe  000006fe  000007b2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.__vector_13 000000b8  0000059c  0000059c  00000650  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.__vector_4 0000005c  00000654  00000654  00000708  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.spi_exchange 0000004e  000006b0  000006b0  00000764  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.main    00000524  00000078  00000078  0000012c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	15 c0       	rjmp	.+42     	; 0x2c <__ctors_end>
   2:	95 c3       	rjmp	.+1834   	; 0x72e <__bad_interrupt>
   4:	7c c3       	rjmp	.+1784   	; 0x6fe <__vector_2>
   6:	93 c3       	rjmp	.+1830   	; 0x72e <__bad_interrupt>
   8:	25 c3       	rjmp	.+1610   	; 0x654 <__vector_4>
   a:	91 c3       	rjmp	.+1826   	; 0x72e <__bad_interrupt>
   c:	90 c3       	rjmp	.+1824   	; 0x72e <__bad_interrupt>
   e:	8f c3       	rjmp	.+1822   	; 0x72e <__bad_interrupt>
  10:	8e c3       	rjmp	.+1820   	; 0x72e <__bad_interrupt>
  12:	8d c3       	rjmp	.+1818   	; 0x72e <__bad_interrupt>
  14:	8c c3       	rjmp	.+1816   	; 0x72e <__bad_interrupt>
  16:	8b c3       	rjmp	.+1814   	; 0x72e <__bad_interrupt>
  18:	8a c3       	rjmp	.+1812   	; 0x72e <__bad_interrupt>
  1a:	c0 c2       	rjmp	.+1408   	; 0x59c <__vector_13>
  1c:	88 c3       	rjmp	.+1808   	; 0x72e <__bad_interrupt>
  1e:	87 c3       	rjmp	.+1806   	; 0x72e <__bad_interrupt>
  20:	86 c3       	rjmp	.+1804   	; 0x72e <__bad_interrupt>
  22:	85 c3       	rjmp	.+1802   	; 0x72e <__bad_interrupt>
  24:	84 c3       	rjmp	.+1800   	; 0x72e <__bad_interrupt>

00000026 <.dinit>:
  26:	00 60       	ori	r16, 0x00	; 0
  28:	00 77       	andi	r16, 0x70	; 112
  2a:	80 00       	.word	0x0080	; ????

0000002c <__ctors_end>:
  2c:	11 24       	eor	r1, r1
  2e:	1f be       	out	0x3f, r1	; 63
  30:	cf ed       	ldi	r28, 0xDF	; 223
  32:	cd bf       	out	0x3d, r28	; 61

00000034 <__do_copy_data>:
  34:	e6 e2       	ldi	r30, 0x26	; 38
  36:	f0 e0       	ldi	r31, 0x00	; 0
  38:	40 e0       	ldi	r20, 0x00	; 0
  3a:	17 c0       	rjmp	.+46     	; 0x6a <__do_clear_bss+0x8>
  3c:	b5 91       	lpm	r27, Z+
  3e:	a5 91       	lpm	r26, Z+
  40:	35 91       	lpm	r19, Z+
  42:	25 91       	lpm	r18, Z+
  44:	05 91       	lpm	r16, Z+
  46:	07 fd       	sbrc	r16, 7
  48:	0c c0       	rjmp	.+24     	; 0x62 <__do_clear_bss>
  4a:	95 91       	lpm	r25, Z+
  4c:	85 91       	lpm	r24, Z+
  4e:	ef 01       	movw	r28, r30
  50:	f9 2f       	mov	r31, r25
  52:	e8 2f       	mov	r30, r24
  54:	05 90       	lpm	r0, Z+
  56:	0d 92       	st	X+, r0
  58:	a2 17       	cp	r26, r18
  5a:	b3 07       	cpc	r27, r19
  5c:	d9 f7       	brne	.-10     	; 0x54 <__SREG__+0x15>
  5e:	fe 01       	movw	r30, r28
  60:	04 c0       	rjmp	.+8      	; 0x6a <__do_clear_bss+0x8>

00000062 <__do_clear_bss>:
  62:	1d 92       	st	X+, r1
  64:	a2 17       	cp	r26, r18
  66:	b3 07       	cpc	r27, r19
  68:	e1 f7       	brne	.-8      	; 0x62 <__do_clear_bss>
  6a:	eb 32       	cpi	r30, 0x2B	; 43
  6c:	f4 07       	cpc	r31, r20
  6e:	31 f7       	brne	.-52     	; 0x3c <__do_copy_data+0x8>
  70:	03 d0       	rcall	.+6      	; 0x78 <_etext>
  72:	00 c0       	rjmp	.+0      	; 0x74 <_exit>

00000074 <_exit>:
  74:	f8 94       	cli

00000076 <__stop_program>:
  76:	ff cf       	rjmp	.-2      	; 0x76 <__stop_program>

Disassembly of section .text:

0000072e <__bad_interrupt>:
 72e:	68 cc       	rjmp	.-1840   	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.__vector_2:

000006fe <__vector_2>:


//外部割り込み1(INT1)
//ソフトUART受信スタートビット検出
ISR(INT1_vect)
{
 6fe:	1f 92       	push	r1
 700:	0f 92       	push	r0
 702:	0f b6       	in	r0, 0x3f	; 63
 704:	0f 92       	push	r0
 706:	11 24       	eor	r1, r1
 708:	8f 93       	push	r24
	suarxbuf = 0;
 70a:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <suarxbuf>
	suarxbit = 0;
 70e:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
	
	//ピン変化割り込み不許可
	cbi(GIMSK, INT1);
 712:	8b b7       	in	r24, 0x3b	; 59
 714:	8f 77       	andi	r24, 0x7F	; 127
 716:	8b bf       	out	0x3b, r24	; 59

	//タイマ開始
	TCNT0 = 15;	//パルスの真ん中で採取するためのウエイト
 718:	8f e0       	ldi	r24, 0x0F	; 15
 71a:	82 bf       	out	0x32, r24	; 50
	TCCR0B |= 0b00000011;
 71c:	83 b7       	in	r24, 0x33	; 51
 71e:	83 60       	ori	r24, 0x03	; 3
 720:	83 bf       	out	0x33, r24	; 51
}
 722:	8f 91       	pop	r24
 724:	0f 90       	pop	r0
 726:	0f be       	out	0x3f, r0	; 63
 728:	0f 90       	pop	r0
 72a:	1f 90       	pop	r1
 72c:	18 95       	reti

Disassembly of section .text.__vector_13:

0000059c <__vector_13>:


//タイマー0比較A一致
//ソフトUART受信データビット検出
ISR(TIMER0_COMPA_vect)
{	
 59c:	1f 92       	push	r1
 59e:	0f 92       	push	r0
 5a0:	0f b6       	in	r0, 0x3f	; 63
 5a2:	0f 92       	push	r0
 5a4:	11 24       	eor	r1, r1
 5a6:	8f 93       	push	r24
 5a8:	9f 93       	push	r25
	uint8_t f_bitset;
	
	//ピンのhigh, low取得
	f_bitset = bit_is_set(PIND,3);
 5aa:	80 b3       	in	r24, 0x10	; 16
 5ac:	88 70       	andi	r24, 0x08	; 8
	
	//スタートビットを再確認し不正なスタートビットを検出
	if(suarxbit == 0 && f_bitset){
 5ae:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 5b2:	91 11       	cpse	r25, r1
 5b4:	0f c0       	rjmp	.+30     	; 0x5d4 <__vector_13+0x38>
 5b6:	88 23       	and	r24, r24
 5b8:	e1 f1       	breq	.+120    	; 0x632 <__vector_13+0x96>
		//タイマ停止
		TCCR0B &= 0b11111000;
 5ba:	83 b7       	in	r24, 0x33	; 51
 5bc:	88 7f       	andi	r24, 0xF8	; 248
 5be:	83 bf       	out	0x33, r24	; 51
		//ピン変化割り込み許可
		sbi(EIFR, INTF1);	//割り込みフラグ強制解除
 5c0:	8a b7       	in	r24, 0x3a	; 58
 5c2:	80 68       	ori	r24, 0x80	; 128
 5c4:	8a bf       	out	0x3a, r24	; 58
		sbi(GIMSK, INT1);
 5c6:	8b b7       	in	r24, 0x3b	; 59
 5c8:	80 68       	ori	r24, 0x80	; 128
 5ca:	8b bf       	out	0x3b, r24	; 59
		suarxbit = -1;
 5cc:	8f ef       	ldi	r24, 0xFF	; 255
 5ce:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		return;
 5d2:	39 c0       	rjmp	.+114    	; 0x646 <__vector_13+0xaa>
	}
	//ストップビット
	else if(suarxbit == 9){
 5d4:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 5d8:	99 30       	cpi	r25, 0x09	; 9
 5da:	79 f4       	brne	.+30     	; 0x5fa <__vector_13+0x5e>
		//タイマ停止
		TCCR0B &= 0b11111000;
 5dc:	93 b7       	in	r25, 0x33	; 51
 5de:	98 7f       	andi	r25, 0xF8	; 248
 5e0:	93 bf       	out	0x33, r25	; 51
		//ピン変化割り込み許可
		sbi(EIFR, INTF1);	//割り込みフラグ強制解除
 5e2:	9a b7       	in	r25, 0x3a	; 58
 5e4:	90 68       	ori	r25, 0x80	; 128
 5e6:	9a bf       	out	0x3a, r25	; 58
		sbi(GIMSK, INT1);
 5e8:	9b b7       	in	r25, 0x3b	; 59
 5ea:	90 68       	ori	r25, 0x80	; 128
 5ec:	9b bf       	out	0x3b, r25	; 59
		
		//不正なストップビット検出
		if(!f_bitset){
 5ee:	81 11       	cpse	r24, r1
 5f0:	10 c0       	rjmp	.+32     	; 0x612 <__vector_13+0x76>
			suarxbit = -1;	//こうするとメインループでホストに送信しない
 5f2:	8f ef       	ldi	r24, 0xFF	; 255
 5f4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			return;
 5f8:	26 c0       	rjmp	.+76     	; 0x646 <__vector_13+0xaa>
		}
	}
	//データビット
	else{
		suarxbuf >>= 1;
 5fa:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <suarxbuf>
 5fe:	96 95       	lsr	r25
 600:	90 93 64 00 	sts	0x0064, r25	; 0x800064 <suarxbuf>
		if(f_bitset){
 604:	88 23       	and	r24, r24
 606:	29 f0       	breq	.+10     	; 0x612 <__vector_13+0x76>
			suarxbuf |= 0b10000000;
 608:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <suarxbuf>
 60c:	80 68       	ori	r24, 0x80	; 128
 60e:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <suarxbuf>
		}
	}
	
	//次のビットへ
	suarxbit++;
 612:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 616:	8f 5f       	subi	r24, 0xFF	; 255
 618:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 61c:	14 c0       	rjmp	.+40     	; 0x646 <__vector_13+0xaa>
		return;
	}
	//ストップビット
	else if(suarxbit == 9){
		//タイマ停止
		TCCR0B &= 0b11111000;
 61e:	83 b7       	in	r24, 0x33	; 51
 620:	88 7f       	andi	r24, 0xF8	; 248
 622:	83 bf       	out	0x33, r24	; 51
		//ピン変化割り込み許可
		sbi(EIFR, INTF1);	//割り込みフラグ強制解除
 624:	8a b7       	in	r24, 0x3a	; 58
 626:	80 68       	ori	r24, 0x80	; 128
 628:	8a bf       	out	0x3a, r24	; 58
		sbi(GIMSK, INT1);
 62a:	8b b7       	in	r24, 0x3b	; 59
 62c:	80 68       	ori	r24, 0x80	; 128
 62e:	8b bf       	out	0x3b, r24	; 59
 630:	e0 cf       	rjmp	.-64     	; 0x5f2 <__vector_13+0x56>
		sbi(GIMSK, INT1);
		suarxbit = -1;
		return;
	}
	//ストップビット
	else if(suarxbit == 9){
 632:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 636:	89 30       	cpi	r24, 0x09	; 9
 638:	91 f3       	breq	.-28     	; 0x61e <__vector_13+0x82>
			return;
		}
	}
	//データビット
	else{
		suarxbuf >>= 1;
 63a:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <suarxbuf>
 63e:	86 95       	lsr	r24
 640:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <suarxbuf>
 644:	e6 cf       	rjmp	.-52     	; 0x612 <__vector_13+0x76>
		}
	}
	
	//次のビットへ
	suarxbit++;
}
 646:	9f 91       	pop	r25
 648:	8f 91       	pop	r24
 64a:	0f 90       	pop	r0
 64c:	0f be       	out	0x3f, r0	; 63
 64e:	0f 90       	pop	r0
 650:	1f 90       	pop	r1
 652:	18 95       	reti

Disassembly of section .text.__vector_4:

00000654 <__vector_4>:


//タイマー1比較A一致
//ソフトUART送信
ISR(TIMER1_COMPA_vect)
{
 654:	1f 92       	push	r1
 656:	0f 92       	push	r0
 658:	0f b6       	in	r0, 0x3f	; 63
 65a:	0f 92       	push	r0
 65c:	11 24       	eor	r1, r1
 65e:	8f 93       	push	r24
	//ストップビット
	if(suatxbit==9){
 660:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <suatxbit>
 664:	89 30       	cpi	r24, 0x09	; 9
 666:	11 f4       	brne	.+4      	; 0x66c <__vector_4+0x18>
		sbi(PORTD,4);
 668:	94 9a       	sbi	0x12, 4	; 18
 66a:	17 c0       	rjmp	.+46     	; 0x69a <__vector_4+0x46>
	}
	//送出完了
	else if(suatxbit==10){
 66c:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <suatxbit>
 670:	8a 30       	cpi	r24, 0x0A	; 10
 672:	39 f4       	brne	.+14     	; 0x682 <__vector_4+0x2e>
		//タイマ停止する
		TCCR1B &= 0b11111000;
 674:	8e b5       	in	r24, 0x2e	; 46
 676:	88 7f       	andi	r24, 0xF8	; 248
 678:	8e bd       	out	0x2e, r24	; 46
		suatxbit = -1;
 67a:	8f ef       	ldi	r24, 0xFF	; 255
 67c:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <suatxbit>
		return;
 680:	11 c0       	rjmp	.+34     	; 0x6a4 <__vector_4+0x50>
	}
	//データビット
	else{
		if(suatxbuf & 1)
 682:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <suatxbuf>
 686:	80 ff       	sbrs	r24, 0
 688:	02 c0       	rjmp	.+4      	; 0x68e <__vector_4+0x3a>
			sbi(PORTD,4);
 68a:	94 9a       	sbi	0x12, 4	; 18
 68c:	01 c0       	rjmp	.+2      	; 0x690 <__vector_4+0x3c>
		else
			cbi(PORTD,4);
 68e:	94 98       	cbi	0x12, 4	; 18
		suatxbuf >>= 1;			
 690:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <suatxbuf>
 694:	86 95       	lsr	r24
 696:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <suatxbuf>
	}
	
	//次のビットへ
	suatxbit++;
 69a:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <suatxbit>
 69e:	8f 5f       	subi	r24, 0xFF	; 255
 6a0:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <suatxbit>
}
 6a4:	8f 91       	pop	r24
 6a6:	0f 90       	pop	r0
 6a8:	0f be       	out	0x3f, r0	; 63
 6aa:	0f 90       	pop	r0
 6ac:	1f 90       	pop	r1
 6ae:	18 95       	reti

Disassembly of section .text.spi_exchange:

000006b0 <spi_exchange>:


//4バイトSPIで交換する
//USIは使わず任意のピンを使う
void spi_exchange(uint8_t *poutdata, uint8_t *pindata)
{
 6b0:	fc 01       	movw	r30, r24
 6b2:	a6 2f       	mov	r26, r22
 6b4:	b7 2f       	mov	r27, r23
 6b6:	bc 01       	movw	r22, r24
 6b8:	6c 5f       	subi	r22, 0xFC	; 252
 6ba:	7f 4f       	sbci	r23, 0xFF	; 255
	uint8_t		delaycnt;

	
	bytecount = 4;
	while(bytecount){
		outdata = poutdata[4-bytecount];
 6bc:	41 91       	ld	r20, Z+
 6be:	38 e0       	ldi	r19, 0x08	; 8
		indata = 0;
 6c0:	20 e0       	ldi	r18, 0x00	; 0
		bitcount = 8;
		while(bitcount){
			//送信データ(MSB先行)
			if(outdata&0x80)
 6c2:	44 23       	and	r20, r20
 6c4:	14 f4       	brge	.+4      	; 0x6ca <spi_exchange+0x1a>
				sbi(PORTD,4);
 6c6:	94 9a       	sbi	0x12, 4	; 18
 6c8:	01 c0       	rjmp	.+2      	; 0x6cc <spi_exchange+0x1c>
			else
				cbi(PORTD,4);
 6ca:	94 98       	cbi	0x12, 4	; 18
			outdata <<= 1;
 6cc:	44 0f       	add	r20, r20
			//クロック上昇
			sbi(PORTB, 4);
 6ce:	c4 9a       	sbi	0x18, 4	; 24
			delaycnt = spidelay;
 6d0:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <spidelay>
			while(delaycnt) delaycnt--;
 6d4:	99 23       	and	r25, r25
 6d6:	11 f0       	breq	.+4      	; 0x6dc <spi_exchange+0x2c>
 6d8:	91 50       	subi	r25, 0x01	; 1
 6da:	f1 f7       	brne	.-4      	; 0x6d8 <spi_exchange+0x28>
			//受信データ
			indata <<= 1;
 6dc:	22 0f       	add	r18, r18
			if(PIND & 0b00001000)
 6de:	83 99       	sbic	0x10, 3	; 16
				indata |= 1;
 6e0:	21 60       	ori	r18, 0x01	; 1
			//クロック下降
			bitcount--;
			cbi(PORTB, 4);
 6e2:	c4 98       	cbi	0x18, 4	; 24
			delaycnt = spidelay;
 6e4:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <spidelay>
			while(delaycnt) delaycnt--;
 6e8:	99 23       	and	r25, r25
 6ea:	11 f0       	breq	.+4      	; 0x6f0 <spi_exchange+0x40>
 6ec:	91 50       	subi	r25, 0x01	; 1
 6ee:	f1 f7       	brne	.-4      	; 0x6ec <spi_exchange+0x3c>
 6f0:	31 50       	subi	r19, 0x01	; 1
	bytecount = 4;
	while(bytecount){
		outdata = poutdata[4-bytecount];
		indata = 0;
		bitcount = 8;
		while(bitcount){
 6f2:	39 f7       	brne	.-50     	; 0x6c2 <spi_exchange+0x12>
			bitcount--;
			cbi(PORTB, 4);
			delaycnt = spidelay;
			while(delaycnt) delaycnt--;
		}
		pindata[4-bytecount] = indata;
 6f4:	2d 93       	st	X+, r18
	uint8_t		indata;
	uint8_t		delaycnt;

	
	bytecount = 4;
	while(bytecount){
 6f6:	e6 17       	cp	r30, r22
 6f8:	f7 07       	cpc	r31, r23
 6fa:	01 f7       	brne	.-64     	; 0x6bc <spi_exchange+0xc>
		}
		pindata[4-bytecount] = indata;
		bytecount--;
	}

}
 6fc:	08 95       	ret

Disassembly of section .text.main:

00000078 <main>:
#define DBGUDR (debugdata[debugpos++])
#endif


int main(void) 
{
  78:	cf 93       	push	r28
  7a:	df 93       	push	r29
  7c:	cd b7       	in	r28, 0x3d	; 61
  7e:	dd 27       	eor	r29, r29
  80:	c8 50       	subi	r28, 0x08	; 8
  82:	cd bf       	out	0x3d, r28	; 61
	uint16_t blkaddr;	//ブロック転送のオフセット位置
	uint16_t cntblk;


	//マスター割り込み禁止
	cli();
  84:	f8 94       	cli
   GND ┃GN  D6┃SpeedSW
       ┗━━━┛
*/

	//IO方向セット(0入力,1出力)
	DDRB  = 0b00010000;
  86:	80 e1       	ldi	r24, 0x10	; 16
  88:	87 bb       	out	0x17, r24	; 23
	DDRD  = 0b00110010;
  8a:	82 e3       	ldi	r24, 0x32	; 50
  8c:	81 bb       	out	0x11, r24	; 17

	//ポート初期化
	//出力の場合1でHigh、0でLow
	//入力の場合1を書くとプルアップ抵抗活性化、0を書くとハイインピーダンス
	PORTB = 0b00000000;
  8e:	18 ba       	out	0x18, r1	; 24
	PORTD = 0b01010001;
  90:	81 e5       	ldi	r24, 0x51	; 81
  92:	82 bb       	out	0x12, r24	; 18
	//タイマ設定
	
	//TCCR0
	//B3,A1,A0	動作種別、CTC動作は010
	//B210	プリスケーラ(000:停止, 001:1, 010:8, 011:64, 100:256, 101:1024, 110,111:予約)
	TCCR0A = 0b00000010;
  94:	82 e0       	ldi	r24, 0x02	; 2
  96:	80 bf       	out	0x30, r24	; 48
	TCCR0B = 0b00000000;
  98:	13 be       	out	0x33, r1	; 51

	//タイマ0比較値(AVRのクロック/UART速度/プリスケーラ)
	OCR0A = 31;
  9a:	9f e1       	ldi	r25, 0x1F	; 31
  9c:	96 bf       	out	0x36, r25	; 54
	TCNT0 = 0;
  9e:	12 be       	out	0x32, r1	; 50
	
	//TCCR1
	//B4,B3,A1,A0 動作種別 	CTCは0100(比較A一致)か1100(捕獲一致)
	//B210	プリスケーラ 設定値はタイマ0と同じ
	TCCR1A = 0;
  a0:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = 0b00001000;
  a2:	98 e0       	ldi	r25, 0x08	; 8
  a4:	9e bd       	out	0x2e, r25	; 46
	OCR1A  = 32;
  a6:	20 e2       	ldi	r18, 0x20	; 32
  a8:	30 e0       	ldi	r19, 0x00	; 0
  aa:	3b bd       	out	0x2b, r19	; 43
  ac:	2a bd       	out	0x2a, r18	; 42
	TCNT1  = 0;
  ae:	1d bc       	out	0x2d, r1	; 45
  b0:	1c bc       	out	0x2c, r1	; 44

	//タイマ割り込みはここで許可するが、タイマーが動いていないので割り込みはまだ発生しない
	TIMSK = 1<<OCIE0A | 1<<OCIE1A;
  b2:	21 e4       	ldi	r18, 0x41	; 65
  b4:	29 bf       	out	0x39, r18	; 57
	//MCU制御
	//7		1を書くとプルアップ禁止
	//6,5,4	休止種別、休止許可
	//3,2	INT1割り込み条件(00:Low,01:両端,10:下降,11:上昇)
	//1,0	INT0割り込み条件
	MCUCR = 0b00001000;
  b6:	95 bf       	out	0x35, r25	; 53
	//ピン割り込みは実行モードになったら許可するのでここではまだ不許可
	GIMSK = 0;
  b8:	1b be       	out	0x3b, r1	; 59

	//////////////////////////////////////////////////////////////////////
	//USART設定

	//初期化時はボーレート0にする必要がある
	UBRRH = 0;
  ba:	12 b8       	out	0x02, r1	; 2
	UBRRL = 0;
  bc:	19 b8       	out	0x09, r1	; 9

	//データレジスタ
	UDR = 0;
  be:	1c b8       	out	0x0c, r1	; 12
	//4	フレーミングエラーフラグ
	//3	データオーバーランフラグ
	//2	パリティエラーフラグ
	//1	倍速許可
	//0	マルチプロセッサ許可
	UCSRA = 0b00000000;
  c0:	1b b8       	out	0x0b, r1	; 11
	//4	受信(RXD0pin)許可
	//3	送信(TXD0pin)許可
	//2	データビット長選択2
	//1	受信追加データビット(9ビットフレームの時使用)
	//0	送信追加データビット(9ビットフレームの時使用)
	UCSRB = 0b00011000;
  c2:	98 e1       	ldi	r25, 0x18	; 24
  c4:	9a b9       	out	0x0a, r25	; 10
	//76 動作モード選択(00:非同期(調歩), 01:同期, 11:SPI)
	//54 パリティ選択(00:パリティなし, 10:偶数, 11:奇数)
	//3	 ストップビット(0:1bit, 1:2bit)
	//21 データビット長選択10(8bitは011)
	//0	 クロック極性(0:送信立ち上がり,受信立下り, 1:その逆、同期動作時のみ有効)
	UCSRC = 0b00000110;
  c6:	96 e0       	ldi	r25, 0x06	; 6
  c8:	93 b9       	out	0x03, r25	; 3

	//ボーレート
	UBRRH = 0;
  ca:	12 b8       	out	0x02, r1	; 2
	UBRRL = UBRR_VAL;
  cc:	9a e0       	ldi	r25, 0x0A	; 10
  ce:	99 b9       	out	0x09, r25	; 9

	//////////////////////////////////////////////////////////////////////
	
	//諸変数初期化
	txinpos = 0;
  d0:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <txinpos>
	txoutpos = 0;
  d4:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <txoutpos>
	rxpos = 0;
	rxbuf[0] = 0x55;
  d8:	95 e5       	ldi	r25, 0x55	; 85
  da:	99 83       	std	Y+1, r25	; 0x01
	rxbuf[1] = 0x55;
  dc:	9a 83       	std	Y+2, r25	; 0x02
	cmdresp[0] = 0xFF;
	cmdresp[1] = 0;		//実行時はコマンド番号が入る
	cmdresp[2] = 0;
	cmdresp[3] = 0;
	suarxbit = -1;
  de:	9f ef       	ldi	r25, 0xFF	; 255
  e0:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__DATA_REGION_ORIGIN__>
	suatxbit = -1;
  e4:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <suatxbit>
	blkmodetype = 0;
	cntblk = 0;
	blkdatalen = 0;
	blkaddr = 0;
	uarterr = 0;
	spidelay = 2;
  e8:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <spidelay>

	//CPUプリスケーラ
	//if(!(PIND & (1<<PIND6))){
	if( (PIND & (1<<PIND6)) == 0 ){
  ec:	86 99       	sbic	0x10, 6	; 16
  ee:	04 c0       	rjmp	.+8      	; 0xf8 <__stack+0x19>
		//起動時はプルアップされている
		//低速モードピンがGNDに接続されていれば低速モードへ移行
		CLKPR = 1<<CLKPCE;	//クロック変更許可
  f0:	80 e8       	ldi	r24, 0x80	; 128
  f2:	86 bd       	out	0x26, r24	; 38
		//CLKPR = 3;			//1/2^3 = 8分周
		CLKPR = 0b0110;		//64分周
  f4:	86 e0       	ldi	r24, 0x06	; 6
  f6:	86 bd       	out	0x26, r24	; 38
	}

	//マスター割り込み許可
	sei();
  f8:	78 94       	sei
	cmdresp[2] = 0;
	cmdresp[3] = 0;
	suarxbit = -1;
	suatxbit = -1;
	blkmodetype = 0;
	cntblk = 0;
  fa:	e1 2c       	mov	r14, r1
  fc:	f1 2c       	mov	r15, r1
	blkdatalen = 0;
	blkaddr = 0;
  fe:	c1 2c       	mov	r12, r1
 100:	d1 2c       	mov	r13, r1
	cmdresp[3] = 0;
	suarxbit = -1;
	suatxbit = -1;
	blkmodetype = 0;
	cntblk = 0;
	blkdatalen = 0;
 102:	a1 2c       	mov	r10, r1
 104:	b1 2c       	mov	r11, r1
	cmdresp[1] = 0;		//実行時はコマンド番号が入る
	cmdresp[2] = 0;
	cmdresp[3] = 0;
	suarxbit = -1;
	suatxbit = -1;
	blkmodetype = 0;
 106:	10 e0       	ldi	r17, 0x00	; 0
	cntblk = 0;
	blkdatalen = 0;
	blkaddr = 0;
	uarterr = 0;
 108:	71 2c       	mov	r7, r1
	//////////////////////////////////////////////////////////////////////
	
	//諸変数初期化
	txinpos = 0;
	txoutpos = 0;
	rxpos = 0;
 10a:	81 2c       	mov	r8, r1
 10c:	00 e0       	ldi	r16, 0x00	; 0

					//レスポンス
					//NULLコマンドとパディングコマンドを除く
					//実際の送信はメインループ内
					if(rxbuf[1]!=0 && rxbuf[1]!=0xFF){
						txbuf[txinpos++] = cmdresp[0];
 10e:	99 24       	eor	r9, r9
 110:	9a 94       	dec	r9
							//タイマを開始
							TCNT1 = 0;
							TCCR1B |= 0b00000011;
							//スタートビット送出
							cbi(PORTD,4);
							suatxbit = 1;
 112:	33 24       	eor	r3, r3
 114:	33 94       	inc	r3
				//flash/eeprom読み込み
				if(txinpos == txoutpos){ //コマンドレスポンスを優先する
					do{
						//ここではrxbufは受信用ではなくSPIのバッファとして使い回している
						if(blkmodetype==0xC1)
							rxbuf[0] = (cntblk&1)==0? 0x20: 0x28;
 116:	68 94       	set
 118:	44 24       	eor	r4, r4
 11a:	45 f8       	bld	r4, 5
 11c:	0f 2e       	mov	r0, r31
 11e:	f8 e2       	ldi	r31, 0x28	; 40
 120:	5f 2e       	mov	r5, r31
 122:	f0 2d       	mov	r31, r0
						else if(blkmodetype==0xC3)
							rxbuf[0] = 0xA0;
 124:	0f 2e       	mov	r0, r31
 126:	f0 ea       	ldi	r31, 0xA0	; 160
 128:	6f 2e       	mov	r6, r31
 12a:	f0 2d       	mov	r31, r0
				//ページ設定(書き込みは書き込み命令を使う)
				if(UCSRA & 0b10000000){	//UART受信データがあるか
					if(blkmodetype==0xC0)	//FLASHページ設定
						rxbuf[0] = (cntblk&1)==0? 0x40: 0x48;
					else if(blkmodetype==0xC2)	//EEPROMページ設定
						rxbuf[0] = 0xC1;
 12c:	0f 2e       	mov	r0, r31
 12e:	f1 ec       	ldi	r31, 0xC1	; 193
 130:	2f 2e       	mov	r2, r31
 132:	f0 2d       	mov	r31, r0
 134:	03 c0       	rjmp	.+6      	; 0x13c <__stack+0x5d>
 136:	10 2f       	mov	r17, r16
 138:	01 c0       	rjmp	.+2      	; 0x13c <__stack+0x5d>
				rxbuf[rxpos++] = UDR;
			}
#endif
			//4バイト受信したら処理する
			if(rxpos==4){
				rxpos=0;
 13a:	80 2e       	mov	r8, r16
	while(1){
		///////////////////////////////////////////////////////////////////////
		//UART送信
		
		//ブリッジからホストへ送信
		if(txinpos != txoutpos){
 13c:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <txinpos>
 140:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <txoutpos>
 144:	98 17       	cp	r25, r24
 146:	91 f0       	breq	.+36     	; 0x16c <__stack+0x8d>
			//UART送信レジスタ空き待ちフラグ(UDRE)
			if(bit_is_set(UCSRA,UDRE)){
 148:	5d 9b       	sbis	0x0b, 5	; 11
 14a:	10 c0       	rjmp	.+32     	; 0x16c <__stack+0x8d>
				//送信データセット
				//同時に送信が開始され、UDREは解除される
				UDR = txbuf[txoutpos++];
 14c:	e0 91 65 00 	lds	r30, 0x0065	; 0x800065 <txoutpos>
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	8e 0f       	add	r24, r30
 154:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <txoutpos>
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	e9 59       	subi	r30, 0x99	; 153
 15c:	ff 4f       	sbci	r31, 0xFF	; 255
 15e:	80 81       	ld	r24, Z
 160:	8c b9       	out	0x0c, r24	; 12
				txoutpos &= TXBUFMAXMASK; //if(txoutpos==TXBUFSIZE) txoutpos = 0;と同じ効果
 162:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <txoutpos>
 166:	8f 70       	andi	r24, 0x0F	; 15
 168:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <txoutpos>
			}
		}

		//ターゲットから受信したソフトUARTのデータがあればホストへ送出するバッファに入れる
		if(suarxbit==10){
 16c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 170:	8a 30       	cpi	r24, 0x0A	; 10
 172:	09 f0       	breq	.+2      	; 0x176 <__stack+0x97>
 174:	c1 c1       	rjmp	.+898    	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
			suarxbit = -1;
 176:	90 92 60 00 	sts	0x0060, r9	; 0x800060 <__DATA_REGION_ORIGIN__>
			txbuf[txinpos] = 0xFF;
 17a:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <txinpos>
 17e:	f0 e0       	ldi	r31, 0x00	; 0
 180:	e9 59       	subi	r30, 0x99	; 153
 182:	ff 4f       	sbci	r31, 0xFF	; 255
 184:	90 82       	st	Z, r9
			txbuf[txinpos+1] = 0xF2;
 186:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <txinpos>
 18a:	f0 e0       	ldi	r31, 0x00	; 0
 18c:	e8 59       	subi	r30, 0x98	; 152
 18e:	ff 4f       	sbci	r31, 0xFF	; 255
 190:	82 ef       	ldi	r24, 0xF2	; 242
 192:	80 83       	st	Z, r24
			txbuf[txinpos+2] = suarxbuf;
 194:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <txinpos>
 198:	f0 e0       	ldi	r31, 0x00	; 0
 19a:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <suarxbuf>
 19e:	e7 59       	subi	r30, 0x97	; 151
 1a0:	ff 4f       	sbci	r31, 0xFF	; 255
 1a2:	80 83       	st	Z, r24
			txbuf[txinpos+3] = 0;
 1a4:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <txinpos>
 1a8:	f0 e0       	ldi	r31, 0x00	; 0
 1aa:	e6 59       	subi	r30, 0x96	; 150
 1ac:	ff 4f       	sbci	r31, 0xFF	; 255
 1ae:	10 82       	st	Z, r1
			txinpos += 4;
 1b0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <txinpos>
 1b4:	8c 5f       	subi	r24, 0xFC	; 252
 1b6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <txinpos>
			txinpos &= TXBUFMAXMASK; //if(txinpos==TXBUFSIZE) txinpos = 0;と同じ効果
 1ba:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <txinpos>
 1be:	8f 70       	andi	r24, 0x0F	; 15
 1c0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <txinpos>

		///////////////////////////////////////////////////////////////////////
		//UART受信

		//ブロック転送のときは4バイト固定ではなく指定したブロック長になる
		if(blkmodetype!=0){
 1c4:	11 23       	and	r17, r17
 1c6:	09 f4       	brne	.+2      	; 0x1ca <__stack+0xeb>
 1c8:	54 c0       	rjmp	.+168    	; 0x272 <__stack+0x193>
			switch(blkmodetype){
 1ca:	11 3c       	cpi	r17, 0xC1	; 193
 1cc:	51 f1       	breq	.+84     	; 0x222 <__stack+0x143>
 1ce:	18 f4       	brcc	.+6      	; 0x1d6 <__stack+0xf7>
 1d0:	10 3c       	cpi	r17, 0xC0	; 192
 1d2:	31 f0       	breq	.+12     	; 0x1e0 <__stack+0x101>
 1d4:	b3 cf       	rjmp	.-154    	; 0x13c <__stack+0x5d>
 1d6:	12 3c       	cpi	r17, 0xC2	; 194
 1d8:	19 f0       	breq	.+6      	; 0x1e0 <__stack+0x101>
 1da:	13 3c       	cpi	r17, 0xC3	; 195
 1dc:	11 f1       	breq	.+68     	; 0x222 <__stack+0x143>
 1de:	ae cf       	rjmp	.-164    	; 0x13c <__stack+0x5d>
			case 0xC0:
			case 0xC2:
				//ページ設定(書き込みは書き込み命令を使う)
				if(UCSRA & 0b10000000){	//UART受信データがあるか
 1e0:	5f 9b       	sbis	0x0b, 7	; 11
 1e2:	ac cf       	rjmp	.-168    	; 0x13c <__stack+0x5d>
					if(blkmodetype==0xC0)	//FLASHページ設定
 1e4:	10 3c       	cpi	r17, 0xC0	; 192
 1e6:	19 f4       	brne	.+6      	; 0x1ee <__stack+0x10f>
						rxbuf[0] = (cntblk&1)==0? 0x40: 0x48;
 1e8:	e0 fe       	sbrs	r14, 0
 1ea:	b5 c1       	rjmp	.+874    	; 0x556 <__LOCK_REGION_LENGTH__+0x156>
 1ec:	a7 c1       	rjmp	.+846    	; 0x53c <__LOCK_REGION_LENGTH__+0x13c>
					else if(blkmodetype==0xC2)	//EEPROMページ設定
 1ee:	12 3c       	cpi	r17, 0xC2	; 194
 1f0:	09 f0       	breq	.+2      	; 0x1f4 <__stack+0x115>
 1f2:	85 c1       	rjmp	.+778    	; 0x4fe <__LOCK_REGION_LENGTH__+0xfe>
						rxbuf[0] = 0xC1;
 1f4:	29 82       	std	Y+1, r2	; 0x01
					rxbuf[1] = blkaddr>>8;
 1f6:	da 82       	std	Y+2, r13	; 0x02
					rxbuf[2] = blkaddr&0xFF;
 1f8:	cb 82       	std	Y+3, r12	; 0x03
					rxbuf[3] = UDR; //DBGUDR; //UDR;
 1fa:	8c b1       	in	r24, 0x0c	; 12
 1fc:	8c 83       	std	Y+4, r24	; 0x04
					//SPI
					spi_exchange(rxbuf, spiin);
 1fe:	be 01       	movw	r22, r28
 200:	6b 5f       	subi	r22, 0xFB	; 251
 202:	7f 4f       	sbci	r23, 0xFF	; 255
 204:	ce 01       	movw	r24, r28
 206:	01 96       	adiw	r24, 0x01	; 1
 208:	53 d2       	rcall	.+1190   	; 0x6b0 <spi_exchange>
				
					//アドレスを進める
					if( (blkmodetype==0xC0 && (cntblk&1)==1) || blkmodetype==0xC2){
						blkaddr++;
 20a:	8f ef       	ldi	r24, 0xFF	; 255
 20c:	c8 1a       	sub	r12, r24
 20e:	d8 0a       	sbc	r13, r24
					}
					//カウンタを進め、ブロック終了判定
					cntblk++;
 210:	8f ef       	ldi	r24, 0xFF	; 255
 212:	e8 1a       	sub	r14, r24
 214:	f8 0a       	sbc	r15, r24
					if(cntblk == blkdatalen){
 216:	ae 14       	cp	r10, r14
 218:	bf 04       	cpc	r11, r15
 21a:	09 f0       	breq	.+2      	; 0x21e <__stack+0x13f>
 21c:	8f cf       	rjmp	.-226    	; 0x13c <__stack+0x5d>
						blkmodetype = 0;
 21e:	10 2f       	mov	r17, r16
 220:	8d cf       	rjmp	.-230    	; 0x13c <__stack+0x5d>
				//ホストへの戻りはない
				break;
			case 0xC1:
			case 0xC3:
				//flash/eeprom読み込み
				if(txinpos == txoutpos){ //コマンドレスポンスを優先する
 222:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <txinpos>
 226:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <txoutpos>
 22a:	98 13       	cpse	r25, r24
 22c:	87 cf       	rjmp	.-242    	; 0x13c <__stack+0x5d>
					do{
						//ここではrxbufは受信用ではなくSPIのバッファとして使い回している
						if(blkmodetype==0xC1)
 22e:	11 3c       	cpi	r17, 0xC1	; 193
 230:	19 f4       	brne	.+6      	; 0x238 <__stack+0x159>
							rxbuf[0] = (cntblk&1)==0? 0x20: 0x28;
 232:	e0 fe       	sbrs	r14, 0
 234:	a8 c1       	rjmp	.+848    	; 0x586 <__LOCK_REGION_LENGTH__+0x186>
 236:	9c c1       	rjmp	.+824    	; 0x570 <__LOCK_REGION_LENGTH__+0x170>
						else if(blkmodetype==0xC3)
 238:	13 3c       	cpi	r17, 0xC3	; 195
 23a:	09 f0       	breq	.+2      	; 0x23e <__stack+0x15f>
 23c:	6b c1       	rjmp	.+726    	; 0x514 <__LOCK_REGION_LENGTH__+0x114>
							rxbuf[0] = 0xA0;
 23e:	69 82       	std	Y+1, r6	; 0x01
						rxbuf[1] = blkaddr>>8;	//アドレス上位
 240:	da 82       	std	Y+2, r13	; 0x02
						rxbuf[2] = blkaddr&0xFF;	//アドレス下位
 242:	cb 82       	std	Y+3, r12	; 0x03
						rxbuf[3] = 0;
 244:	0c 83       	std	Y+4, r16	; 0x04
						//SPI
						spi_exchange(rxbuf, spiin);
 246:	be 01       	movw	r22, r28
 248:	6b 5f       	subi	r22, 0xFB	; 251
 24a:	7f 4f       	sbci	r23, 0xFF	; 255
 24c:	ce 01       	movw	r24, r28
 24e:	01 96       	adiw	r24, 0x01	; 1
 250:	2f d2       	rcall	.+1118   	; 0x6b0 <spi_exchange>
						//アドレスを進める
						if( (blkmodetype==0xC1 && (cntblk&1)==1) || blkmodetype==0xC3){
							blkaddr++;
 252:	8f ef       	ldi	r24, 0xFF	; 255
 254:	c8 1a       	sub	r12, r24
 256:	d8 0a       	sbc	r13, r24
						}
						//ホストへ戻し
						while(bit_is_clear(UCSRA,UDRE));
 258:	5d 9b       	sbis	0x0b, 5	; 11
 25a:	fe cf       	rjmp	.-4      	; 0x258 <__stack+0x179>
						UDR = spiin[3];
 25c:	88 85       	ldd	r24, Y+8	; 0x08
 25e:	8c b9       	out	0x0c, r24	; 12
						cntblk++;
 260:	8f ef       	ldi	r24, 0xFF	; 255
 262:	e8 1a       	sub	r14, r24
 264:	f8 0a       	sbc	r15, r24
					}while(cntblk!=blkdatalen);
 266:	ae 14       	cp	r10, r14
 268:	bf 04       	cpc	r11, r15
 26a:	09 f7       	brne	.-62     	; 0x22e <__stack+0x14f>
							blkaddr++;
						}
						//ホストへ戻し
						while(bit_is_clear(UCSRA,UDRE));
						UDR = spiin[3];
						cntblk++;
 26c:	75 01       	movw	r14, r10
					}while(cntblk!=blkdatalen);
					blkmodetype = 0;
 26e:	10 2f       	mov	r17, r16
 270:	65 cf       	rjmp	.-310    	; 0x13c <__stack+0x5d>
		else if(blkmodetype==0){
			//UART受信完了待ち	
#if _DEBUG
			rxbuf[rxpos++] = DBGUDR;
#else
			if(bit_is_set(UCSRA,RXC)){
 272:	5f 9b       	sbis	0x0b, 7	; 11
 274:	0c c0       	rjmp	.+24     	; 0x28e <__stack+0x1af>
				//受信バッファ異常フラグ
				uarterr |= (UCSRA & 0b00011000);	//bit4=フレーム異常, bit3=オーバーラン
 276:	8b b1       	in	r24, 0x0b	; 11
 278:	88 71       	andi	r24, 0x18	; 24
 27a:	78 2a       	or	r7, r24
				//UDRを読むと自動的に受信完了フラグは消える
				rxbuf[rxpos++] = UDR;
 27c:	8c b1       	in	r24, 0x0c	; 12
 27e:	e1 e0       	ldi	r30, 0x01	; 1
 280:	f0 e0       	ldi	r31, 0x00	; 0
 282:	ec 0f       	add	r30, r28
 284:	fd 1f       	adc	r31, r29
 286:	e8 0d       	add	r30, r8
 288:	f1 1d       	adc	r31, r1
 28a:	80 83       	st	Z, r24
 28c:	83 94       	inc	r8
			}
#endif
			//4バイト受信したら処理する
			if(rxpos==4){
 28e:	84 e0       	ldi	r24, 0x04	; 4
 290:	88 12       	cpse	r8, r24
 292:	51 cf       	rjmp	.-350    	; 0x136 <__stack+0x57>
				rxpos=0;
				if(uarterr){
 294:	77 20       	and	r7, r7
 296:	81 f1       	breq	.+96     	; 0x2f8 <__stack+0x219>
					txbuf[txinpos++] = uarterr;
 298:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <txinpos>
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	8e 0f       	add	r24, r30
 2a0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <txinpos>
 2a4:	f0 e0       	ldi	r31, 0x00	; 0
 2a6:	e9 59       	subi	r30, 0x99	; 153
 2a8:	ff 4f       	sbci	r31, 0xFF	; 255
 2aa:	70 82       	st	Z, r7
					txbuf[txinpos++] = uarterr;
 2ac:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <txinpos>
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	8e 0f       	add	r24, r30
 2b4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <txinpos>
 2b8:	f0 e0       	ldi	r31, 0x00	; 0
 2ba:	e9 59       	subi	r30, 0x99	; 153
 2bc:	ff 4f       	sbci	r31, 0xFF	; 255
 2be:	70 82       	st	Z, r7
					txbuf[txinpos++] = uarterr;
 2c0:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <txinpos>
 2c4:	81 e0       	ldi	r24, 0x01	; 1
 2c6:	8e 0f       	add	r24, r30
 2c8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <txinpos>
 2cc:	f0 e0       	ldi	r31, 0x00	; 0
 2ce:	e9 59       	subi	r30, 0x99	; 153
 2d0:	ff 4f       	sbci	r31, 0xFF	; 255
 2d2:	70 82       	st	Z, r7
					txbuf[txinpos++] = uarterr;
 2d4:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <txinpos>
 2d8:	81 e0       	ldi	r24, 0x01	; 1
 2da:	8e 0f       	add	r24, r30
 2dc:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <txinpos>
 2e0:	f0 e0       	ldi	r31, 0x00	; 0
 2e2:	e9 59       	subi	r30, 0x99	; 153
 2e4:	ff 4f       	sbci	r31, 0xFF	; 255
 2e6:	70 82       	st	Z, r7
					txinpos &= TXBUFMAXMASK;
 2e8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <txinpos>
 2ec:	8f 70       	andi	r24, 0x0F	; 15
 2ee:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <txinpos>
 2f2:	10 2f       	mov	r17, r16
				rxbuf[rxpos++] = UDR;
			}
#endif
			//4バイト受信したら処理する
			if(rxpos==4){
				rxpos=0;
 2f4:	80 2e       	mov	r8, r16
 2f6:	22 cf       	rjmp	.-444    	; 0x13c <__stack+0x5d>
					txbuf[txinpos++] = uarterr;
					txbuf[txinpos++] = uarterr;
					txinpos &= TXBUFMAXMASK;
				}
				//ターゲットコマンド、ただしピン変化割込み(GIMSK)を優先
				else if(rxbuf[0]!=0xFF && GIMSK==0){
 2f8:	89 81       	ldd	r24, Y+1	; 0x01
 2fa:	8f 3f       	cpi	r24, 0xFF	; 255
 2fc:	e9 f1       	breq	.+122    	; 0x378 <__stack+0x299>
 2fe:	8b b7       	in	r24, 0x3b	; 59
 300:	81 11       	cpse	r24, r1
 302:	3a c0       	rjmp	.+116    	; 0x378 <__stack+0x299>
					//SPIでターゲットと4バイト交換する
					/*
					spi_exchange(rxbuf, &txbuf[txinpos]);
					txinpos += 4;
					*/
					spi_exchange(rxbuf, spiin);
 304:	be 01       	movw	r22, r28
 306:	6b 5f       	subi	r22, 0xFB	; 251
 308:	7f 4f       	sbci	r23, 0xFF	; 255
 30a:	ce 01       	movw	r24, r28
 30c:	01 96       	adiw	r24, 0x01	; 1
 30e:	d0 d1       	rcall	.+928    	; 0x6b0 <spi_exchange>
					txbuf[txinpos++] = 0x6F;
 310:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <txinpos>
 314:	81 e0       	ldi	r24, 0x01	; 1
 316:	8e 0f       	add	r24, r30
 318:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <txinpos>
 31c:	f0 e0       	ldi	r31, 0x00	; 0
 31e:	e9 59       	subi	r30, 0x99	; 153
 320:	ff 4f       	sbci	r31, 0xFF	; 255
 322:	8f e6       	ldi	r24, 0x6F	; 111
 324:	80 83       	st	Z, r24
					txbuf[txinpos++] = spiin[1];
 326:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <txinpos>
 32a:	81 e0       	ldi	r24, 0x01	; 1
 32c:	8e 0f       	add	r24, r30
 32e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <txinpos>
 332:	f0 e0       	ldi	r31, 0x00	; 0
 334:	8e 81       	ldd	r24, Y+6	; 0x06
 336:	e9 59       	subi	r30, 0x99	; 153
 338:	ff 4f       	sbci	r31, 0xFF	; 255
 33a:	80 83       	st	Z, r24
					txbuf[txinpos++] = spiin[2];
 33c:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <txinpos>
 340:	81 e0       	ldi	r24, 0x01	; 1
 342:	8e 0f       	add	r24, r30
 344:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <txinpos>
 348:	f0 e0       	ldi	r31, 0x00	; 0
 34a:	8f 81       	ldd	r24, Y+7	; 0x07
 34c:	e9 59       	subi	r30, 0x99	; 153
 34e:	ff 4f       	sbci	r31, 0xFF	; 255
 350:	80 83       	st	Z, r24
					txbuf[txinpos++] = spiin[3];
 352:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <txinpos>
 356:	81 e0       	ldi	r24, 0x01	; 1
 358:	8e 0f       	add	r24, r30
 35a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <txinpos>
 35e:	f0 e0       	ldi	r31, 0x00	; 0
 360:	88 85       	ldd	r24, Y+8	; 0x08
 362:	e9 59       	subi	r30, 0x99	; 153
 364:	ff 4f       	sbci	r31, 0xFF	; 255
 366:	80 83       	st	Z, r24
					txinpos &= TXBUFMAXMASK; //if(txinpos==TXBUFSIZE) txinpos = 0;
 368:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <txinpos>
 36c:	8f 70       	andi	r24, 0x0F	; 15
 36e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <txinpos>
 372:	10 2f       	mov	r17, r16
				rxbuf[rxpos++] = UDR;
			}
#endif
			//4バイト受信したら処理する
			if(rxpos==4){
				rxpos=0;
 374:	80 2e       	mov	r8, r16
					spi_exchange(rxbuf, spiin);
					txbuf[txinpos++] = 0x6F;
					txbuf[txinpos++] = spiin[1];
					txbuf[txinpos++] = spiin[2];
					txbuf[txinpos++] = spiin[3];
					txinpos &= TXBUFMAXMASK; //if(txinpos==TXBUFSIZE) txinpos = 0;
 376:	e2 ce       	rjmp	.-572    	; 0x13c <__stack+0x5d>
				}
				//ブリッジコマンド
				else{
					cmdresp[0] = 0xFF;
					cmdresp[1] = rxbuf[1];
 378:	8a 81       	ldd	r24, Y+2	; 0x02
					cmdresp[2] = 0;
					cmdresp[3] = 0;

					//コマンド振り分け
					switch(rxbuf[1]){
 37a:	8e 30       	cpi	r24, 0x0E	; 14
 37c:	09 f4       	brne	.+2      	; 0x380 <__stack+0x2a1>
 37e:	5a c0       	rjmp	.+180    	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 380:	80 f4       	brcc	.+32     	; 0x3a2 <__stack+0x2c3>
 382:	8b 30       	cpi	r24, 0x0B	; 11
 384:	09 f4       	brne	.+2      	; 0x388 <__stack+0x2a9>
 386:	46 c0       	rjmp	.+140    	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 388:	28 f4       	brcc	.+10     	; 0x394 <__stack+0x2b5>
 38a:	86 30       	cpi	r24, 0x06	; 6
 38c:	d1 f0       	breq	.+52     	; 0x3c2 <__stack+0x2e3>
 38e:	8a 30       	cpi	r24, 0x0A	; 10
 390:	c9 f1       	breq	.+114    	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 392:	7b c0       	rjmp	.+246    	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
 394:	8c 30       	cpi	r24, 0x0C	; 12
 396:	09 f4       	brne	.+2      	; 0x39a <__stack+0x2bb>
 398:	41 c0       	rjmp	.+130    	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 39a:	8d 30       	cpi	r24, 0x0D	; 13
 39c:	09 f4       	brne	.+2      	; 0x3a0 <__stack+0x2c1>
 39e:	46 c0       	rjmp	.+140    	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 3a0:	74 c0       	rjmp	.+232    	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
 3a2:	84 3c       	cpi	r24, 0xC4	; 196
 3a4:	38 f4       	brcc	.+14     	; 0x3b4 <__stack+0x2d5>
 3a6:	80 3c       	cpi	r24, 0xC0	; 192
 3a8:	08 f0       	brcs	.+2      	; 0x3ac <__stack+0x2cd>
 3aa:	48 c0       	rjmp	.+144    	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 3ac:	84 31       	cpi	r24, 0x14	; 20
 3ae:	09 f4       	brne	.+2      	; 0x3b2 <__stack+0x2d3>
 3b0:	bb c0       	rjmp	.+374    	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
 3b2:	6b c0       	rjmp	.+214    	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
 3b4:	8e 3c       	cpi	r24, 0xCE	; 206
 3b6:	09 f4       	brne	.+2      	; 0x3ba <__stack+0x2db>
 3b8:	4c c0       	rjmp	.+152    	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 3ba:	81 3f       	cpi	r24, 0xF1	; 241
 3bc:	09 f4       	brne	.+2      	; 0x3c0 <__stack+0x2e1>
 3be:	53 c0       	rjmp	.+166    	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
 3c0:	64 c0       	rjmp	.+200    	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
					case 0:	//null command
						break;
					case 6:
						//ターゲットリセットピン切り替え
						if(rxbuf[2]==0){
 3c2:	9b 81       	ldd	r25, Y+3	; 0x03
 3c4:	91 11       	cpse	r25, r1
 3c6:	07 c0       	rjmp	.+14     	; 0x3d6 <__stack+0x2f7>
							//プログラミングモードに切り替え
							//外部割り込み不許可でソフトUART使用不可に
							cbi(GIMSK, INT1);
 3c8:	9b b7       	in	r25, 0x3b	; 59
 3ca:	9f 77       	andi	r25, 0x7F	; 127
 3cc:	9b bf       	out	0x3b, r25	; 59
							//ソフトSPI MOSI Low
							cbi(PORTD, 4);
 3ce:	94 98       	cbi	0x12, 4	; 18
							//RESETをlow
							cbi(PORTD, 5);
 3d0:	95 98       	cbi	0x12, 5	; 18
 3d2:	10 2f       	mov	r17, r16
 3d4:	5b c0       	rjmp	.+182    	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
						}
						else if(rxbuf[2]==1){
 3d6:	91 30       	cpi	r25, 0x01	; 1
 3d8:	51 f4       	brne	.+20     	; 0x3ee <__stack+0x30f>
							//実行モードに切り替え
							//ソフトUART Tx High(アイドル)
							sbi(PORTD, 4);
 3da:	94 9a       	sbi	0x12, 4	; 18
							//RESETをhiにして実行モードへ
							sbi(PORTD, 5);
 3dc:	95 9a       	sbi	0x12, 5	; 18
							//外部割り込み許可でソフトウェアUARTに
							sbi(EIFR, INTF1);	//1を書き込むと割り込みフラグ強制解除
 3de:	9a b7       	in	r25, 0x3a	; 58
 3e0:	90 68       	ori	r25, 0x80	; 128
 3e2:	9a bf       	out	0x3a, r25	; 58
							sbi(GIMSK, INT1);
 3e4:	9b b7       	in	r25, 0x3b	; 59
 3e6:	90 68       	ori	r25, 0x80	; 128
 3e8:	9b bf       	out	0x3b, r25	; 59
 3ea:	10 2f       	mov	r17, r16
 3ec:	4f c0       	rjmp	.+158    	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
						}
						else if(rxbuf[2]==2){
 3ee:	92 30       	cpi	r25, 0x02	; 2
 3f0:	19 f4       	brne	.+6      	; 0x3f8 <__stack+0x319>
							//RESETをlow
							cbi(PORTD, 5);
 3f2:	95 98       	cbi	0x12, 5	; 18
 3f4:	10 2f       	mov	r17, r16
 3f6:	4a c0       	rjmp	.+148    	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
						}
						else if(rxbuf[2]==3){
 3f8:	93 30       	cpi	r25, 0x03	; 3
 3fa:	09 f0       	breq	.+2      	; 0x3fe <__stack+0x31f>
 3fc:	98 c0       	rjmp	.+304    	; 0x52e <__LOCK_REGION_LENGTH__+0x12e>
							//RESETをhigh
							sbi(PORTD, 5);					
 3fe:	95 9a       	sbi	0x12, 5	; 18
 400:	10 2f       	mov	r17, r16
 402:	44 c0       	rjmp	.+136    	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
						}
						break;
					case 10: //0x0A
						//ポートB下位ニブル変更
						PORTB = (PORTB & 0xF0) | (rxbuf[2] & 0x0F);
 404:	98 b3       	in	r25, 0x18	; 24
 406:	2b 81       	ldd	r18, Y+3	; 0x03
 408:	2f 70       	andi	r18, 0x0F	; 15
 40a:	90 7f       	andi	r25, 0xF0	; 240
 40c:	92 2b       	or	r25, r18
 40e:	98 bb       	out	0x18, r25	; 24
						break;
 410:	10 2f       	mov	r17, r16
 412:	3c c0       	rjmp	.+120    	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
					case 11: //0x0B
						//ポートB下位ニブル読み取り
						cmdresp[2] = PORTB & 0x0F;
 414:	98 b3       	in	r25, 0x18	; 24
 416:	9f 70       	andi	r25, 0x0F	; 15
				//ブリッジコマンド
				else{
					cmdresp[0] = 0xFF;
					cmdresp[1] = rxbuf[1];
					cmdresp[2] = 0;
					cmdresp[3] = 0;
 418:	20 2f       	mov	r18, r16
						PORTB = (PORTB & 0xF0) | (rxbuf[2] & 0x0F);
						break;
					case 11: //0x0B
						//ポートB下位ニブル読み取り
						cmdresp[2] = PORTB & 0x0F;
						break;
 41a:	8e c0       	rjmp	.+284    	; 0x538 <__LOCK_REGION_LENGTH__+0x138>
					case 12: //0x0C
						//ポートB下位ニブル方向変更
						DDRB = (DDRB & 0xF0) | (rxbuf[2] & 0x0F);
 41c:	97 b3       	in	r25, 0x17	; 23
 41e:	2b 81       	ldd	r18, Y+3	; 0x03
 420:	2f 70       	andi	r18, 0x0F	; 15
 422:	90 7f       	andi	r25, 0xF0	; 240
 424:	92 2b       	or	r25, r18
 426:	97 bb       	out	0x17, r25	; 23
						break;
 428:	10 2f       	mov	r17, r16
 42a:	30 c0       	rjmp	.+96     	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
					case 13: //0x0D
						//ポートB下位ニブル方向読み取り
						cmdresp[2] = DDRB & 0x0F;
 42c:	97 b3       	in	r25, 0x17	; 23
 42e:	9f 70       	andi	r25, 0x0F	; 15
				//ブリッジコマンド
				else{
					cmdresp[0] = 0xFF;
					cmdresp[1] = rxbuf[1];
					cmdresp[2] = 0;
					cmdresp[3] = 0;
 430:	20 2f       	mov	r18, r16
						DDRB = (DDRB & 0xF0) | (rxbuf[2] & 0x0F);
						break;
					case 13: //0x0D
						//ポートB下位ニブル方向読み取り
						cmdresp[2] = DDRB & 0x0F;
						break;
 432:	82 c0       	rjmp	.+260    	; 0x538 <__LOCK_REGION_LENGTH__+0x138>
					case 14: //0x0E
						//ポートB下位ニブル読み取り
						cmdresp[2] = PINB & 0x0F;
 434:	96 b3       	in	r25, 0x16	; 22
 436:	9f 70       	andi	r25, 0x0F	; 15
				//ブリッジコマンド
				else{
					cmdresp[0] = 0xFF;
					cmdresp[1] = rxbuf[1];
					cmdresp[2] = 0;
					cmdresp[3] = 0;
 438:	20 2f       	mov	r18, r16
						cmdresp[2] = DDRB & 0x0F;
						break;
					case 14: //0x0E
						//ポートB下位ニブル読み取り
						cmdresp[2] = PINB & 0x0F;
						break;
 43a:	7e c0       	rjmp	.+252    	; 0x538 <__LOCK_REGION_LENGTH__+0x138>
					case 0xC1:
					case 0xC2:
					case 0xC3:
						//ブロック転送モード設定
						blkmodetype = rxbuf[1];
						blkaddr = rxbuf[2];
 43c:	cb 80       	ldd	r12, Y+3	; 0x03
 43e:	d1 2c       	mov	r13, r1
						blkaddr <<= 8;
 440:	dc 2c       	mov	r13, r12
 442:	cc 24       	eor	r12, r12
						blkaddr += rxbuf[3];
 444:	9c 81       	ldd	r25, Y+4	; 0x04
 446:	c9 0e       	add	r12, r25
 448:	d1 1c       	adc	r13, r1
					case 0xC0:
					case 0xC1:
					case 0xC2:
					case 0xC3:
						//ブロック転送モード設定
						blkmodetype = rxbuf[1];
 44a:	18 2f       	mov	r17, r24
						blkaddr = rxbuf[2];
						blkaddr <<= 8;
						blkaddr += rxbuf[3];
						cntblk = 0;
 44c:	e1 2c       	mov	r14, r1
 44e:	f1 2c       	mov	r15, r1
						break;
 450:	1d c0       	rjmp	.+58     	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
					case 0xCE:
						//ブロック転送の長さ
						//rxbuf[2]に上位8bit、[3]に下位8bit
						blkdatalen = rxbuf[2];
 452:	ab 80       	ldd	r10, Y+3	; 0x03
 454:	b1 2c       	mov	r11, r1
						blkdatalen <<= 8;
						blkdatalen += rxbuf[3];
 456:	ba 2c       	mov	r11, r10
 458:	aa 24       	eor	r10, r10
 45a:	9c 81       	ldd	r25, Y+4	; 0x04
 45c:	a9 0e       	add	r10, r25
 45e:	b1 1c       	adc	r11, r1
				//ブリッジコマンド
				else{
					cmdresp[0] = 0xFF;
					cmdresp[1] = rxbuf[1];
					cmdresp[2] = 0;
					cmdresp[3] = 0;
 460:	20 2f       	mov	r18, r16
				}
				//ブリッジコマンド
				else{
					cmdresp[0] = 0xFF;
					cmdresp[1] = rxbuf[1];
					cmdresp[2] = 0;
 462:	90 2f       	mov	r25, r16
						//ブロック転送の長さ
						//rxbuf[2]に上位8bit、[3]に下位8bit
						blkdatalen = rxbuf[2];
						blkdatalen <<= 8;
						blkdatalen += rxbuf[3];
						break;
 464:	69 c0       	rjmp	.+210    	; 0x538 <__LOCK_REGION_LENGTH__+0x138>
					case 0xF1:
						//ホストからターゲットへソフトUARTでデータ送信
						if(suatxbit != -1){
 466:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <suatxbit>
 46a:	9f 3f       	cpi	r25, 0xFF	; 255
 46c:	09 f0       	breq	.+2      	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
 46e:	62 c0       	rjmp	.+196    	; 0x534 <__LOCK_REGION_LENGTH__+0x134>
							//すでに送信中
							cmdresp[3] = 0xFF;
						}
						else{
							suatxbuf = rxbuf[2];
 470:	9b 81       	ldd	r25, Y+3	; 0x03
 472:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <suatxbuf>
							//タイマを開始
							TCNT1 = 0;
 476:	1d bc       	out	0x2d, r1	; 45
 478:	1c bc       	out	0x2c, r1	; 44
							TCCR1B |= 0b00000011;
 47a:	9e b5       	in	r25, 0x2e	; 46
 47c:	93 60       	ori	r25, 0x03	; 3
 47e:	9e bd       	out	0x2e, r25	; 46
							//スタートビット送出
							cbi(PORTD,4);
 480:	94 98       	cbi	0x12, 4	; 18
							suatxbit = 1;
 482:	30 92 63 00 	sts	0x0063, r3	; 0x800063 <suatxbit>
 486:	10 2f       	mov	r17, r16
 488:	01 c0       	rjmp	.+2      	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
					cmdresp[1] = rxbuf[1];
					cmdresp[2] = 0;
					cmdresp[3] = 0;

					//コマンド振り分け
					switch(rxbuf[1]){
 48a:	10 2f       	mov	r17, r16
					}

					//レスポンス
					//NULLコマンドとパディングコマンドを除く
					//実際の送信はメインループ内
					if(rxbuf[1]!=0 && rxbuf[1]!=0xFF){
 48c:	9a 81       	ldd	r25, Y+2	; 0x02
 48e:	91 50       	subi	r25, 0x01	; 1
 490:	9e 3f       	cpi	r25, 0xFE	; 254
 492:	08 f0       	brcs	.+2      	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
 494:	52 ce       	rjmp	.-860    	; 0x13a <__stack+0x5b>
 496:	20 2f       	mov	r18, r16
 498:	90 2f       	mov	r25, r16
						txbuf[txinpos++] = cmdresp[0];
 49a:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <txinpos>
 49e:	31 e0       	ldi	r19, 0x01	; 1
 4a0:	3e 0f       	add	r19, r30
 4a2:	30 93 62 00 	sts	0x0062, r19	; 0x800062 <txinpos>
 4a6:	f0 e0       	ldi	r31, 0x00	; 0
 4a8:	e9 59       	subi	r30, 0x99	; 153
 4aa:	ff 4f       	sbci	r31, 0xFF	; 255
 4ac:	90 82       	st	Z, r9
						txbuf[txinpos++] = cmdresp[1];
 4ae:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <txinpos>
 4b2:	31 e0       	ldi	r19, 0x01	; 1
 4b4:	3e 0f       	add	r19, r30
 4b6:	30 93 62 00 	sts	0x0062, r19	; 0x800062 <txinpos>
 4ba:	f0 e0       	ldi	r31, 0x00	; 0
 4bc:	e9 59       	subi	r30, 0x99	; 153
 4be:	ff 4f       	sbci	r31, 0xFF	; 255
 4c0:	80 83       	st	Z, r24
						txbuf[txinpos++] = cmdresp[2];
 4c2:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <txinpos>
 4c6:	81 e0       	ldi	r24, 0x01	; 1
 4c8:	8e 0f       	add	r24, r30
 4ca:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <txinpos>
 4ce:	f0 e0       	ldi	r31, 0x00	; 0
 4d0:	e9 59       	subi	r30, 0x99	; 153
 4d2:	ff 4f       	sbci	r31, 0xFF	; 255
 4d4:	90 83       	st	Z, r25
						txbuf[txinpos++] = cmdresp[3];
 4d6:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <txinpos>
 4da:	81 e0       	ldi	r24, 0x01	; 1
 4dc:	8e 0f       	add	r24, r30
 4de:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <txinpos>
 4e2:	f0 e0       	ldi	r31, 0x00	; 0
 4e4:	e9 59       	subi	r30, 0x99	; 153
 4e6:	ff 4f       	sbci	r31, 0xFF	; 255
 4e8:	20 83       	st	Z, r18
						txinpos &= TXBUFMAXMASK;
 4ea:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <txinpos>
 4ee:	8f 70       	andi	r24, 0x0F	; 15
 4f0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <txinpos>
				rxbuf[rxpos++] = UDR;
			}
#endif
			//4バイト受信したら処理する
			if(rxpos==4){
				rxpos=0;
 4f4:	80 2e       	mov	r8, r16
 4f6:	22 ce       	rjmp	.-956    	; 0x13c <__stack+0x5d>

		///////////////////////////////////////////////////////////////////////
		//UART受信

		//ブロック転送のときは4バイト固定ではなく指定したブロック長になる
		if(blkmodetype!=0){
 4f8:	11 11       	cpse	r17, r1
 4fa:	67 ce       	rjmp	.-818    	; 0x1ca <__stack+0xeb>
 4fc:	ba ce       	rjmp	.-652    	; 0x272 <__stack+0x193>
				if(UCSRA & 0b10000000){	//UART受信データがあるか
					if(blkmodetype==0xC0)	//FLASHページ設定
						rxbuf[0] = (cntblk&1)==0? 0x40: 0x48;
					else if(blkmodetype==0xC2)	//EEPROMページ設定
						rxbuf[0] = 0xC1;
					rxbuf[1] = blkaddr>>8;
 4fe:	da 82       	std	Y+2, r13	; 0x02
					rxbuf[2] = blkaddr&0xFF;
 500:	cb 82       	std	Y+3, r12	; 0x03
					rxbuf[3] = UDR; //DBGUDR; //UDR;
 502:	8c b1       	in	r24, 0x0c	; 12
 504:	8c 83       	std	Y+4, r24	; 0x04
					//SPI
					spi_exchange(rxbuf, spiin);
 506:	be 01       	movw	r22, r28
 508:	6b 5f       	subi	r22, 0xFB	; 251
 50a:	7f 4f       	sbci	r23, 0xFF	; 255
 50c:	ce 01       	movw	r24, r28
 50e:	01 96       	adiw	r24, 0x01	; 1
 510:	cf d0       	rcall	.+414    	; 0x6b0 <spi_exchange>
 512:	7e ce       	rjmp	.-772    	; 0x210 <__stack+0x131>
						//ここではrxbufは受信用ではなくSPIのバッファとして使い回している
						if(blkmodetype==0xC1)
							rxbuf[0] = (cntblk&1)==0? 0x20: 0x28;
						else if(blkmodetype==0xC3)
							rxbuf[0] = 0xA0;
						rxbuf[1] = blkaddr>>8;	//アドレス上位
 514:	da 82       	std	Y+2, r13	; 0x02
						rxbuf[2] = blkaddr&0xFF;	//アドレス下位
 516:	cb 82       	std	Y+3, r12	; 0x03
						rxbuf[3] = 0;
 518:	0c 83       	std	Y+4, r16	; 0x04
						//SPI
						spi_exchange(rxbuf, spiin);
 51a:	be 01       	movw	r22, r28
 51c:	6b 5f       	subi	r22, 0xFB	; 251
 51e:	7f 4f       	sbci	r23, 0xFF	; 255
 520:	ce 01       	movw	r24, r28
 522:	01 96       	adiw	r24, 0x01	; 1
 524:	c5 d0       	rcall	.+394    	; 0x6b0 <spi_exchange>
 526:	98 ce       	rjmp	.-720    	; 0x258 <__stack+0x179>
				//ブリッジコマンド
				else{
					cmdresp[0] = 0xFF;
					cmdresp[1] = rxbuf[1];
					cmdresp[2] = 0;
					cmdresp[3] = 0;
 528:	20 2f       	mov	r18, r16
						//ポートB下位ニブル読み取り
						cmdresp[2] = PINB & 0x0F;
						break;
					//このブリッジのバージョン
					case 20: //0x14
						cmdresp[2] = VERSION;
 52a:	93 2d       	mov	r25, r3
 52c:	05 c0       	rjmp	.+10     	; 0x538 <__LOCK_REGION_LENGTH__+0x138>
				//ブリッジコマンド
				else{
					cmdresp[0] = 0xFF;
					cmdresp[1] = rxbuf[1];
					cmdresp[2] = 0;
					cmdresp[3] = 0;
 52e:	20 2f       	mov	r18, r16
				}
				//ブリッジコマンド
				else{
					cmdresp[0] = 0xFF;
					cmdresp[1] = rxbuf[1];
					cmdresp[2] = 0;
 530:	90 2f       	mov	r25, r16
 532:	02 c0       	rjmp	.+4      	; 0x538 <__LOCK_REGION_LENGTH__+0x138>
						break;
					case 0xF1:
						//ホストからターゲットへソフトUARTでデータ送信
						if(suatxbit != -1){
							//すでに送信中
							cmdresp[3] = 0xFF;
 534:	29 2d       	mov	r18, r9
				}
				//ブリッジコマンド
				else{
					cmdresp[0] = 0xFF;
					cmdresp[1] = rxbuf[1];
					cmdresp[2] = 0;
 536:	90 2f       	mov	r25, r16
 538:	10 2f       	mov	r17, r16
 53a:	af cf       	rjmp	.-162    	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
			case 0xC0:
			case 0xC2:
				//ページ設定(書き込みは書き込み命令を使う)
				if(UCSRA & 0b10000000){	//UART受信データがあるか
					if(blkmodetype==0xC0)	//FLASHページ設定
						rxbuf[0] = (cntblk&1)==0? 0x40: 0x48;
 53c:	88 e4       	ldi	r24, 0x48	; 72
 53e:	89 83       	std	Y+1, r24	; 0x01
					else if(blkmodetype==0xC2)	//EEPROMページ設定
						rxbuf[0] = 0xC1;
					rxbuf[1] = blkaddr>>8;
 540:	da 82       	std	Y+2, r13	; 0x02
					rxbuf[2] = blkaddr&0xFF;
 542:	cb 82       	std	Y+3, r12	; 0x03
					rxbuf[3] = UDR; //DBGUDR; //UDR;
 544:	8c b1       	in	r24, 0x0c	; 12
 546:	8c 83       	std	Y+4, r24	; 0x04
					//SPI
					spi_exchange(rxbuf, spiin);
 548:	be 01       	movw	r22, r28
 54a:	6b 5f       	subi	r22, 0xFB	; 251
 54c:	7f 4f       	sbci	r23, 0xFF	; 255
 54e:	ce 01       	movw	r24, r28
 550:	01 96       	adiw	r24, 0x01	; 1
 552:	ae d0       	rcall	.+348    	; 0x6b0 <spi_exchange>
 554:	5a ce       	rjmp	.-844    	; 0x20a <__stack+0x12b>
			case 0xC0:
			case 0xC2:
				//ページ設定(書き込みは書き込み命令を使う)
				if(UCSRA & 0b10000000){	//UART受信データがあるか
					if(blkmodetype==0xC0)	//FLASHページ設定
						rxbuf[0] = (cntblk&1)==0? 0x40: 0x48;
 556:	80 e4       	ldi	r24, 0x40	; 64
 558:	89 83       	std	Y+1, r24	; 0x01
					else if(blkmodetype==0xC2)	//EEPROMページ設定
						rxbuf[0] = 0xC1;
					rxbuf[1] = blkaddr>>8;
 55a:	da 82       	std	Y+2, r13	; 0x02
					rxbuf[2] = blkaddr&0xFF;
 55c:	cb 82       	std	Y+3, r12	; 0x03
					rxbuf[3] = UDR; //DBGUDR; //UDR;
 55e:	8c b1       	in	r24, 0x0c	; 12
 560:	8c 83       	std	Y+4, r24	; 0x04
					//SPI
					spi_exchange(rxbuf, spiin);
 562:	be 01       	movw	r22, r28
 564:	6b 5f       	subi	r22, 0xFB	; 251
 566:	7f 4f       	sbci	r23, 0xFF	; 255
 568:	ce 01       	movw	r24, r28
 56a:	01 96       	adiw	r24, 0x01	; 1
 56c:	a1 d0       	rcall	.+322    	; 0x6b0 <spi_exchange>
 56e:	50 ce       	rjmp	.-864    	; 0x210 <__stack+0x131>
				//flash/eeprom読み込み
				if(txinpos == txoutpos){ //コマンドレスポンスを優先する
					do{
						//ここではrxbufは受信用ではなくSPIのバッファとして使い回している
						if(blkmodetype==0xC1)
							rxbuf[0] = (cntblk&1)==0? 0x20: 0x28;
 570:	59 82       	std	Y+1, r5	; 0x01
						else if(blkmodetype==0xC3)
							rxbuf[0] = 0xA0;
						rxbuf[1] = blkaddr>>8;	//アドレス上位
 572:	da 82       	std	Y+2, r13	; 0x02
						rxbuf[2] = blkaddr&0xFF;	//アドレス下位
 574:	cb 82       	std	Y+3, r12	; 0x03
						rxbuf[3] = 0;
 576:	0c 83       	std	Y+4, r16	; 0x04
						//SPI
						spi_exchange(rxbuf, spiin);
 578:	be 01       	movw	r22, r28
 57a:	6b 5f       	subi	r22, 0xFB	; 251
 57c:	7f 4f       	sbci	r23, 0xFF	; 255
 57e:	ce 01       	movw	r24, r28
 580:	01 96       	adiw	r24, 0x01	; 1
 582:	96 d0       	rcall	.+300    	; 0x6b0 <spi_exchange>
 584:	66 ce       	rjmp	.-820    	; 0x252 <__stack+0x173>
				//flash/eeprom読み込み
				if(txinpos == txoutpos){ //コマンドレスポンスを優先する
					do{
						//ここではrxbufは受信用ではなくSPIのバッファとして使い回している
						if(blkmodetype==0xC1)
							rxbuf[0] = (cntblk&1)==0? 0x20: 0x28;
 586:	49 82       	std	Y+1, r4	; 0x01
						else if(blkmodetype==0xC3)
							rxbuf[0] = 0xA0;
						rxbuf[1] = blkaddr>>8;	//アドレス上位
 588:	da 82       	std	Y+2, r13	; 0x02
						rxbuf[2] = blkaddr&0xFF;	//アドレス下位
 58a:	cb 82       	std	Y+3, r12	; 0x03
						rxbuf[3] = 0;
 58c:	0c 83       	std	Y+4, r16	; 0x04
						//SPI
						spi_exchange(rxbuf, spiin);
 58e:	be 01       	movw	r22, r28
 590:	6b 5f       	subi	r22, 0xFB	; 251
 592:	7f 4f       	sbci	r23, 0xFF	; 255
 594:	ce 01       	movw	r24, r28
 596:	01 96       	adiw	r24, 0x01	; 1
 598:	8b d0       	rcall	.+278    	; 0x6b0 <spi_exchange>
 59a:	5e ce       	rjmp	.-836    	; 0x258 <__stack+0x179>
